using System;
using System.Drawing;
using System.Windows.Forms;
using System.Diagnostics;

namespace CPU_Gadget
{
    public partial class Form1 : Form
    {
        const int iGapX = 5;
        const int iGapY = 5;
        int intX = 5;
        int intY = 50;
        int intCPUCounter = 0;
        ProcessorUsage puCPU = new ProcessorUsage();
        Pen myRedPen = new Pen(System.Drawing.Color.Red);
        Pen myGreenPen = new Pen(System.Drawing.Color.Green);
        Pen myYellowPen = new Pen(System.Drawing.Color.Yellow);
        Pen penColor;
        private System.Drawing.Bitmap m_objDrawingSurface;
        Graphics objGraphics;
        Rectangle rectBounds;

        public Form1()
        {
            InitializeComponent();      
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            InitializeSurface();
            this.Invalidate();
        }

     
        public class ProcessorUsage
        {
            const float sampleFrequencyMillis = 1000;

            protected object syncLock = new object();
            protected PerformanceCounter counter;
            protected float lastSample;
            protected DateTime lastSampleTime;

            /// <summary>
            /// 
            /// </summary>
            public ProcessorUsage()
            {
                this.counter = new PerformanceCounter("Processor", "% Processor Time", "_Total", true);
            }

            /// <summary>
            /// 
            /// </summary>
            /// <returns></returns>
            public float GetCurrentValue()
            {
                if ((DateTime.UtcNow - lastSampleTime).TotalMilliseconds > sampleFrequencyMillis)
                {
                    lock (syncLock)
                    {
                        if ((DateTime.UtcNow - lastSampleTime).TotalMilliseconds > sampleFrequencyMillis)
                        {
                            lastSample = counter.NextValue();
                            lastSampleTime = DateTime.UtcNow;
                        }
                    }
                }

                return lastSample;
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            myRedPen.Dispose();
            myGreenPen.Dispose();
            myYellowPen.Dispose();
            objGraphics.Dispose();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            m_objDrawingSurface = new Bitmap(this.ClientRectangle.Width, this.ClientRectangle.Height, System.Drawing.Imaging.PixelFormat.Format24bppRgb);            
            objGraphics = Graphics.FromImage(m_objDrawingSurface);
            objGraphics.Clear(SystemColors.Control);
            rectBounds = new Rectangle(0, 0, m_objDrawingSurface.Width, m_objDrawingSurface.Height);
        }

        private void InitializeSurface()
        {
           
            float flCPU = puCPU.GetCurrentValue();
            intCPUCounter = Convert.ToInt32(flCPU);    

            if (intCPUCounter < 50) { penColor = myGreenPen; }
            if (intCPUCounter >= 50 && intCPUCounter <= 90) { penColor = myYellowPen; }
            if (intCPUCounter > 90) { penColor = myRedPen; }

            //Create a rectangle the same size as the bitmap.            
            //Reduce the rectangle slightly so the ellipse won't appear on the border.
            rectBounds.Inflate(-1, -1);

            objGraphics.DrawLine(penColor, intX + iGapX, intY + iGapY, intX + iGapY, intY + iGapY - (intCPUCounter / 2) );            

            label2.Text = intCPUCounter.ToString();
            intX = intX + 1;
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            Graphics objGraphics1;
            //You can't modify e.Graphics directly.
            objGraphics1 = e.Graphics;
            // Draw the contents of the bitmap on the form.
            objGraphics1.DrawImage(m_objDrawingSurface, 0, 0,
              m_objDrawingSurface.Width,
              m_objDrawingSurface.Height);
            objGraphics1.Dispose();
        }
    }
}
