using System;
using System.Drawing;
using System.Windows.Forms;
using System.Diagnostics;

namespace CPU_Gadget
{
    public partial class Form1 : Form
    {
        const int intGapX = 2;
        int intX = intGapX;
        int intY = 60;
        int intCPUUtilization = 0;
        int intInterval = 0;
        
        ProcessorUsage puCPU = new ProcessorUsage();
        Pen myRedPen = new Pen(System.Drawing.Color.Red);
        Pen myGreenPen = new Pen(System.Drawing.Color.Green);
        Pen myYellowPen = new Pen(System.Drawing.Color.Yellow);
        Pen penColor;
        private Bitmap bmpSurface;
        Graphics objBitmapGraphics;
        Rectangle rectBounds;

        public Form1()
        {
            InitializeComponent();      
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            DrawCPUUsage();
            Invalidate();            
            intInterval++;
            if (intInterval == 100)
            {
                objBitmapGraphics.Clear(SystemColors.Control);
                intInterval = 0;
                intX = intGapX;
                lbl5min.Text = intCPUUtilization.ToString();
            }
            if (intInterval == 20)
            {
                lbl1min.Text = intCPUUtilization.ToString();
            }
            if (intInterval == 40)
            {
                lbl2min.Text = intCPUUtilization.ToString();
            }
            if (intInterval == 60)
            {
                lbl3min.Text = intCPUUtilization.ToString();
            }
            if (intInterval == 80)
            {
                lbl4min.Text = intCPUUtilization.ToString();
            }       
        }

        public class ProcessorUsage
        {
            const float sampleFrequencyMillis = 1000;

            protected object syncLock = new object();
            protected PerformanceCounter counter;
            protected float lastSample;
            protected DateTime lastSampleTime;

            /// <summary>
            /// 
            /// </summary>
            public ProcessorUsage()
            {
                this.counter = new PerformanceCounter("Processor", "% Processor Time", "_Total", true);
            }

            /// <summary>
            /// 
            /// </summary>
            /// <returns></returns>
            public float GetCurrentValue()
            {
                if ((DateTime.UtcNow - lastSampleTime).TotalMilliseconds > sampleFrequencyMillis)
                {
                    lock (syncLock)
                    {
                        if ((DateTime.UtcNow - lastSampleTime).TotalMilliseconds > sampleFrequencyMillis)
                        {
                            lastSample = counter.NextValue();
                            lastSampleTime = DateTime.UtcNow;
                        }
                    }
                }

                return lastSample;
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            myRedPen.Dispose();
            myGreenPen.Dispose();
            myYellowPen.Dispose();
            objBitmapGraphics.Dispose();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            bmpSurface = new Bitmap(ClientRectangle.Width, ClientRectangle.Height);            
            objBitmapGraphics = Graphics.FromImage(bmpSurface);
            objBitmapGraphics.Clear(SystemColors.Control);
            rectBounds = new Rectangle(0, 0, bmpSurface.Width, bmpSurface.Height);            
        }

        private void DrawCPUUsage()
        {         
            float flCPU = puCPU.GetCurrentValue();
            intCPUUtilization = Convert.ToInt32(flCPU);    

            if (intCPUUtilization < 50) { penColor = myGreenPen; }
            if (intCPUUtilization >= 50 && intCPUUtilization <= 90) { penColor = myYellowPen; }
            if (intCPUUtilization > 90) { penColor = myRedPen; }

            rectBounds.Inflate(-1, -1);

            objBitmapGraphics.DrawLine(penColor, intX, intY , intX , intY - (intCPUUtilization / 2) );            
            
            intX = intX + 1;
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            Graphics objFormGraphics;
            objFormGraphics = e.Graphics;            
            objFormGraphics.DrawImage(bmpSurface, 0, 0, bmpSurface.Width, bmpSurface.Height);
            objFormGraphics.Dispose();
        }
    }
}
