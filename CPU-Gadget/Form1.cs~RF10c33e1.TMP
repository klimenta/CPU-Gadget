using System;
using System.Drawing;
using System.Windows.Forms;
using System.Diagnostics;

namespace CPU_Gadget
{
    public partial class Form1 : Form
    {
        int intX = 0;
        const int intY = 110;
        int intCPUCounter = 0;
        ProcessorUsage puCPU = new ProcessorUsage();
        Pen myRedPen = new Pen(System.Drawing.Color.Red);
        Pen myGreenPen = new Pen(System.Drawing.Color.Green);
        Pen myYellowPen = new Pen(System.Drawing.Color.Yellow);
        Pen penColor;
        


        public Form1()
        {
            InitializeComponent();
            

        }

        private void timer1_Tick(object sender, EventArgs e)
        {          
            float flCPU = puCPU.GetCurrentValue();
            intCPUCounter = Convert.ToInt32(flCPU);
            Graphics formGraphics = panel1.CreateGraphics();
            if (intCPUCounter < 50) { penColor = myGreenPen; }
            if (intCPUCounter >= 50 && intCPUCounter <=90) { penColor = myYellowPen; }
            if (intCPUCounter > 90) { penColor = myRedPen; }

            formGraphics.DrawLine(penColor, intX, intY, intX, intY - intCPUCounter);
            
            formGraphics.Dispose();

            label2.Text = intCPUCounter.ToString();
            intX = intX + 1;
            
        }

        public class ProcessorUsage
        {
            const float sampleFrequencyMillis = 1000;

            protected object syncLock = new object();
            protected PerformanceCounter counter;
            protected float lastSample;
            protected DateTime lastSampleTime;

            /// <summary>
            /// 
            /// </summary>
            public ProcessorUsage()
            {
                this.counter = new PerformanceCounter("Processor", "% Processor Time", "_Total", true);
            }

            /// <summary>
            /// 
            /// </summary>
            /// <returns></returns>
            public float GetCurrentValue()
            {
                if ((DateTime.UtcNow - lastSampleTime).TotalMilliseconds > sampleFrequencyMillis)
                {
                    lock (syncLock)
                    {
                        if ((DateTime.UtcNow - lastSampleTime).TotalMilliseconds > sampleFrequencyMillis)
                        {
                            lastSample = counter.NextValue();
                            lastSampleTime = DateTime.UtcNow;
                        }
                    }
                }

                return lastSample;
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            myRedPen.Dispose();
            myGreenPen.Dispose();
            myYellowPen.Dispose();
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
      
        }
    }
}
