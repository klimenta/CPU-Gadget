using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;
using System.Threading;

namespace CPU_Gadget
{
    public partial class Form1 : Form
    {
        int intX = 0;
        int intY = 120;
        int intCPUCounter = 0;
        ProcessorUsage puCPU = new ProcessorUsage();

        public Form1()
        {
            InitializeComponent();
        }

   

        private void timer1_Tick(object sender, EventArgs e)
        {          
            float flCPU = puCPU.GetCurrentValue();
            intCPUCounter = Convert.ToInt32(flCPU);
            
            var myPen = new System.Drawing.Pen(System.Drawing.Color.Red);
            var formGraphics = this.CreateGraphics();
            formGraphics.DrawLine(myPen, intX, intY, intX, intY - intCPUCounter);           
            myPen.Dispose();
            formGraphics.Dispose();

            label2.Text = intCPUCounter.ToString();
            intX = intX + 1;
            
        }

        public class ProcessorUsage
        {
            const float sampleFrequencyMillis = 1000;

            protected object syncLock = new object();
            protected PerformanceCounter counter;
            protected float lastSample;
            protected DateTime lastSampleTime;

            /// <summary>
            /// 
            /// </summary>
            public ProcessorUsage()
            {
                this.counter = new PerformanceCounter("Processor", "% Processor Time", "_Total", true);
            }

            /// <summary>
            /// 
            /// </summary>
            /// <returns></returns>
            public float GetCurrentValue()
            {
                if ((DateTime.UtcNow - lastSampleTime).TotalMilliseconds > sampleFrequencyMillis)
                {
                    lock (syncLock)
                    {
                        if ((DateTime.UtcNow - lastSampleTime).TotalMilliseconds > sampleFrequencyMillis)
                        {
                            lastSample = counter.NextValue();
                            lastSampleTime = DateTime.UtcNow;
                        }
                    }
                }

                return lastSample;
            }
        }

    }
}
